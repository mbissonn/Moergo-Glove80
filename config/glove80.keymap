/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

/// layers

/*#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3
*/

#define _34KQWE 0
#define _QWERTY 1
#define _CLMKdh 2
#define _NAVNUM 3
#define _USFUNC 4
#define _BTOOTH 5
#define _GAMING 6

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
/*
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
*/     
        td_cl_home: td_ctrl_left_home {
              compatible = "zmk,behavior-tap-dance";
              label = "TD_CTRL_LEFT_HOME";
              #binding-cells = <0>;
              tapping-term-ms = <200>;
              bindings = <&kp LC(LEFT)>, <&kp HOME>;
        };


        td_cr_end: td_ctrl_right_end {
              compatible = "zmk,behavior-tap-dance";
              label = "TD_CTRL_RIGHT_END";
              #binding-cells = <0>;
              tapping-term-ms = <200>;
              bindings = <&kp LC(RIGHT)>, <&kp END>;
        };
       
        td_esc_mtsk: td_esc_multitasker {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ESC_MULTITASKER";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ESC>, <&kp LC(LA(TAB))>;
        };

        td_q_esc: td_q_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Q_ESC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp Q>, <&kp ESC>;
        };

        td_a_tab: td_a_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_A_TAB";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp A>, <&kp TAB>;
        };       

        td_pp_nxt_prv: td_play_pause_next_prev {
             compatible = "zmk,behavior-tap-dance";
             label = "TD_PLAY_PAUSE_NEXT_PREV";
             #binding-cells = <0>;
             tapping-term-ms = <200>;
             bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        td_em_bt: td_email_string_bt_toggle {
             compatible = "zmk,behavior-tap-dance";
             label = "TD_EMAIL_STRING_BT_TOGGLE";  
             #binding-cells = <0>;
             tapping-term-ms = <200>;
             bindings = <&none>, <&em_str>, <&mo _BTOOTH>;
        };
        
        dt_gm_tog: dt_gaming_toggle {
             compatible = "zmk,behavior-tap-dance";
             label = "DOUBLE_TAP_GAMING_TOGGLE";  
             #binding-cells = <0>;
             tapping-term-ms = <200>;
             bindings = <&none>, <&tog _GAMING>;
        };

        mm_btb_l: mm_brace_to_bracket_left {        
            compatible = "zmk,behavior-mod-morph";
            label = "MM_BRACE_TO_BRACKET_LEFT";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp LBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_btb_r: mm_brace_to_bracket_right {        
            compatible = "zmk,behavior-mod-morph";
            label = "MM_BRACE_TO_BRACKET_RIGHT";
            #binding-cells = <0>;
            bindings = <&kp RBRC>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>; 
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };

        bt_str: bluetooth_string {
            compatible = "zmk,behavior-macro";
            label = "BLUETOOTH_STRING";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <5>;
            bindings = <&kp B &kp L &kp U &kp E &kp T &kp O &kp O &kp T &kp H >;
        };       
        
        gm_str: gaming_string {
            compatible = "zmk,behavior-macro";
            label = "GAMING_STRING";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <5>;
            bindings = <&kp G &kp A &kp M &kp I &kp N &kp G>;
        };  

        em_str: email_string {
            compatible = "zmk,behavior-macro";
            label = "EMAIL_STRING";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <5>;
            bindings = <&kp M &kp B &kp I &kp S &kp S &kp O &kp N &kp N &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M >;
        };          
    };

    keymap {
        compatible = "zmk,keymap";
      
        _34KQWE {
            bindings = <
            &td_em_bt  &none        &none  &none  &none                                                                                                   &none     &none      &none      &none            &dt_gm_tog
            &none      &none        &none  &none  &none  &none                                                                                    &none   &none     &none      &none      &none            &none
            &none      &td_q_esc    &kp W  &kp E  &kp R  &kp T                                                                                    &kp Y   &kp U     &kp I      &kp O      &kp P            &none
            &none      &td_a_tab    &kp S  &kp D  &kp F  &kp G                                                                                    &kp H   &kp J     &kp K      &kp L      &kp SQT          &none
            &none      &mt LSHFT Z  &kp X  &kp C  &kp V  &kp B  &none              &none          &none  &none  &none          &none              &kp N   &kp M     &kp COMMA  &kp DOT    &mt RSHFT SLASH  &none
            &kp LGUI   &kp LCTRL    &none  &none  &none         &lt _NAVNUM ENTER  &mt LCTRL DEL  &none  &none  &mt RALT BSPC  &lt _NAVNUM SPACE          &none      &none     &none      &kp RCTRL        &kp RGUI
            >;
        };

        _QWERTY {
            bindings = <
            &td_em_bt     &kp F1    &kp F2    &kp F3  &kp F4                                                                                                    &kp F5    &kp F6     &kp F7     &kp F8    &dt_gm_tog
            &kp GRAVE     &kp N1    &kp N2    &kp N3  &kp N4    &kp N5                                                                                  &kp N6  &kp N7    &kp N8     &kp N9     &kp N0    &kp EQUAL
            &td_esc_mtsk  &kp Q     &kp W     &kp E   &kp R     &kp T                                                                                   &kp Y   &kp U     &kp I      &kp O      &kp P     &kp MINUS
            &kp TAB       &kp A     &kp S     &kp D   &kp F     &kp G                                                                                   &kp H   &kp J     &kp K      &kp L      &kp SQT   &kp BSLH
            &kp LSHFT     &kp Z     &kp X     &kp C   &kp V     &kp B  &kp SPACE          &kp DEL    &kp LGUI   &kp RGUI   &kp BSPC   &kp ENTER          &kp N   &kp M     &kp COMMA  &kp DOT    &kp FSLH  &kp LSHFT
            &kp PAGE_UP   &kp HOME  &kp LEFT  &kp UP  &kp LBKT         &lt _NAVNUM ENTER  &kp LCTRL  &kp LALT   &kp RCTRL  &kp RALT   &lt _NAVNUM SPACE          &kp RBKT  &kp DOWN   &kp RIGHT  &kp END   &kp PG_DN
            >;
        };

        _CLMKdh {
            bindings = <    
            &td_em_bt     &kp F1    &kp F2    &kp F3  &kp F4                                                                                                      &kp F5    &kp F6     &kp F7     &kp F8    &dt_gm_tog
            &kp GRAVE     &kp N1    &kp N2    &kp N3  &kp N4    &kp N5                                                                                    &kp N6  &kp N7    &kp N8     &kp N9     &kp N0    &kp EQUAL
            &td_esc_mtsk  &kp Q     &kp W     &kp F   &kp P     &kp B                                                                                     &kp J   &kp L     &kp U      &kp Y      &kp SQT   &kp MINUS
            &kp TAB       &kp A     &kp R     &kp S   &kp T     &kp G                                                                                     &kp M   &kp N     &kp E      &kp I      &kp O     &kp BSLH
            &kp LSHFT     &kp Z     &kp X     &kp C   &kp D     &kp V  &kp SPACE          &kp DEL    &kp LGUI   &kp RGUI  &kp BSPC     &kp ENTER          &kp K   &kp H     &kp COMMA  &kp DOT    &kp FSLH  &kp LSHFT
            &kp PAGE_UP   &kp HOME  &kp LEFT  &kp UP  &kp LBKT         &lt _NAVNUM ENTER  &kp LCTRL  &kp LALT   &kp RALT  &mt RALT N0  &lt _NAVNUM SPACE          &kp RBKT  &kp DOWN   &kp RIGHT  &kp END   &kp PG_DN
            >;
        };

        _NAVNUM {
            bindings = <
            &none     &none            &none        &none      &none                                                                                            &none   &none   &none   &none            &tog _QWERTY
            &none     &none            &none        &none      &none       &none                                                                     &none      &none   &none   &none   &none            &none
            &none     &td_esc_mtsk     &td_cl_home  &kp UP     &td_cr_end  &kp LPAR                                                                  &kp RPAR   &kp N7  &kp N8  &kp N9  &kp LC(DEL)      &none
            &none     &kp TAB          &kp LEFT     &kp DOWN   &kp RIGHT   &mm_btb_l                                                                 &mm_btb_r  &kp N4  &kp N5  &kp N6  &kp SEMI         &none
            &none     &mt LSHFT SPACE  &kp UNDER    &kp COLON  &kp MINUS   &kp EQUAL  &trans       &trans  &trans  &trans  &trans       &trans       &kp PIPE   &kp N1  &kp N2  &kp N3  &mt LSHIFT BSLH  &none
            &kp LGUI  &kp LCTRL        &none        &none      &none                  &mo _USFUNC  &trans  &trans  &trans  &mt RGUI N0  &mo _USFUNC             &none   &none   &none   &kp RCTRL        &kp RGUI
            >; 
        };

        _USFUNC {
            bindings = <
            &none     &none      &none      &none      &none                                                                                                 &none         &none         &none           &none      &tog _CLMKdh
            &none     &none      &none      &none      &none         &none                                                                       &none       &none         &none         &none           &none      &none
            &none     &kp CAPS   &kp GRAVE  &kp TILDE  &kp C_BRI_DN  &kp C_BRI_AUTO                                                              &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &td_pp_nxt_prv  &td_em_bt  &none
            &none     &kp EXCL   &kp AT     &kp HASH   &kp DLLR      &kp PRCNT                                                                   &kp CARET   &kp AMPS      &kp ASTRK     &kp MINUS       &kp PLUS   &none
            &none     &kp F1     &kp F2     &kp F3     &kp F4        &kp F5          &trans       &trans   &trans  &trans  &trans   &trans       &kp F6      &kp F7        &kp F8        &kp F9          &kp F10    &none
            &kp LGUI  &kp LCTRL  &none      &none      &none                         &mo _USFUNC  &kp F11  &trans  &trans  &kp F12  &mo _USFUNC              &none         &none         &none           &kp RCTRL  &kp RGUI
            >;
        };  

        _BTOOTH {
            bindings = <
            &none  &bt_0  &bt_1  &bt_2  &bt_3                                                                               &none  &none  &none  &none  &none       
            &none  &none  &none  &none  &none  &none                                                                 &none  &none  &none  &none  &none  &none
            &none  &none  &none  &none  &none  &none                                                                 &none  &none  &none  &none  &none  &none
            &none  &none  &none  &none  &none  &none                                                                 &none  &none  &none  &none  &none  &none
            &none  &none  &none  &none  &none  &none  &bt_str       &bt BT_CLR      &bootloader &none  &none  &none  &none  &none  &none  &none  &none  &none
            &none  &none  &none  &none  &none         &out OUT_USB  &bt BT_CLR_ALL  &sys_reset  &none  &none  &none         &none  &none  &none  &none  &none       
            >;
        };


        _GAMING {
            bindings = <
            &kp ESC    &kp F6   &kp F7    &kp F8  &kp F9                                                                                           &kp F5    &kp F6     &kp F7     &kp F8    &dt_gm_tog
            &kp GRAVE  &kp F1   &kp F2    &kp F3  &kp F4  &kp F5                                                                           &kp N6  &kp N7    &kp N8     &kp N9     &kp N0    &rgb_ug RGB_TOG     
            &kp BSLH   &kp Q    &kp W     &kp E   &kp R   &kp T                                                                            &kp Y   &kp U     &kp I      &kp O      &kp P     &kp MINUS
            &kp TAB    &kp A    &kp S     &kp D   &kp F   &kp G                                                                            &kp H   &kp J     &kp K      &kp L      &kp SQT   &kp BSLH
            &kp LSHFT  &kp Z    &kp X     &kp C   &kp V   &kp B  &kp ENTER  &kp LALT   &kp BSPC   &kp RGUI   &kp BSPC   &kp ENTER          &kp N   &kp M     &kp COMMA  &kp DOT    &kp FSLH  &kp LSHFT
            &kp EQUAL  &kp N1   &kp N2    &kp N3  &kp N4         &kp SPACE  &kp LCTRL  &kp DEL    &kp RCTRL  &kp RALT   &lt _NAVNUM SPACE          &kp RBKT  &kp DOWN   &kp RIGHT  &kp END   &kp PG_DN
            >;
        };

/*
        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_UP                                                                             &kp PRCNT    &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
*/
    };
};
